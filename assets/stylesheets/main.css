/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

/*
  ========================================
  Grid
  ========================================
*/
/* Picking a Box Size 
Generally speaking, the best box-sizing value to use is border-box. The border-box value makes our math much, much easier. If we want an element to be 400 pixels wide, it is, and it will remain 400 pixels wide no matter what padding or border values we add to it. Additionally,
we can easily mix length values. Say we want our box to be 40% wide. Adding a padding of 20 pixels and a border of 10 pixels around every side of an element isn’t difficult,
and we can still guarantee that the actual width of our box will remain 40% despite using pixel values elsewhere. The only drawback to using the box-sizing property is that as part of the CSS3 specification,
it isn’t supported in every browser; it especially lacks support in older browsers. Fortunately this is becoming less and less relevant as new browsers are released. Chances are we’re safe to use the box-sizing property,
but should we notice any issues, it’s worth looking into which browser those issues are occurring with. 
*/

/* we can use the universal selector, *, along with universal pseudo-elements, *:before and *:after, to select every imaginable element and change the box-sizing to border-box. Remember,
we’re going to want to include the necessary vendor prefixes for the box-sizing property, as it is a relatively new property. 
*/

*,
*:before,
*:after {
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
}

/*Next we’ll want to create a class that will serve as a container for our elements. We can use this container class on different elements to set a common width, center the elements on the page, and apply some common horizontal padding.*/
/* Just below our universal selector rule set, let’s create a selector with a class of container. Within this selector let’s set our width to 960 pixels, our left and right padding to 30 pixels, our top and bottom margins to 0, and our left and right margins to auto. */
/* Setting a width tells the browser definitively how wide any element with the class of container should be. Using a left and right margin of auto in conjunction with this width lets the browser automatically figure out equal left and right margins for the element, thus centering it on the page. Lastly, the left and right padding ensures that our content isn’t sitting directly on the edge of the element and provides a little breathing room for the content. */
.container {
	margin       : 0 auto;
	padding-left : 30px;
	padding-right: 30px;
	width        : 960px;
}

/*
  ========================================
  Typography
  ========================================
*/
/* Now that all of our content is centered, let’s create some vertical spacing between elements. For starters let’s place a 22-pixel bottom margin on a few of our heading and paragraph elements. We’ll place and comment on these typography styles below our grid styles. */
h1, h3, h4, h5, p {
	margin-bottom: 22px;
  }

/*
  ========================================
  Buttons
  ========================================
*/
/* Let’s also try our hand at creating a border and some rounded corners. We’ll start by placing a button within the top <section> element on our home page, just below the header. */
/* Previously we added an <a> element within this <section> element. Let’s add the classes of btn and btn-alt to this anchor.    */
/* To begin let’s add the btn class and apply some common styles that can be shared across all buttons. We’ll want all of our buttons to have a 5-pixel border-radius. They should be displayed as inline-block elements so we can add padding around all four sides without issue; we’ll remove any margin. */

.btn {
	border-radius: 5px;
	display      : inline-block;
	margin       : 0;
}

/* We’ll also want to include styles specific to this button, which we’ll do by using the btn-alt class. Here we’ll add a 1-pixel, solid, gray border with 10 pixels of padding on the top and bottom of the button and 30 pixels of padding on the left and right of the button. */
.btn-alt {
	border : 1px solid #51a2f3;
	padding: 10px 30px;
}
/* Using both the btn and btn-alt classes on the same <a> element allows these styles to be layered on, rendering all of the styles on a single element. */

/*
  ========================================
  Home
  ========================================
*/
/* Because we’re working on the home page, let’s also add a bit of padding to the <section> element that contains our <a> element with the classes of btn and btn-alt. We’ll do so by adding a class attribute value of hero to the <section> element, alongside the container class attribute value, as this will be the leading section of our website. */
/* Next we’ll want to create a new section within our CSS file for home page styles, and, once we’re ready, we’ll use the class of hero to apply padding around all four sides of the <section> element. */
.hero {
	padding: 22px 80px 66px 80px;
  }
#section-1 {
	display: block;
	background-color: rgb(70, 197, 87);
	border          : lightcoral solid 2px;
}

#section-2 {
	display: block;
	background-color: lightblue;
	border          : lightcoral solid 2px;
}

#section-3 {
	background-color: rgb(114, 81, 235);
	border          : lightcoral solid 2px;
}
  .float-left {
 	float : left;
 	margin: 0 1.5%;
 	width : 30%;
 }

 .float-right {
 	float : right;
 	margin: 0 1.5%;
 	width : 30%;
 }

 footer {
 	background-color: lightcoral;
 	clear           : both;
 	margin-bottom   : 0;
 }

 /* header,
 section,
 aside,
 footer {
 	margin: 0 1.5% 24px 1.5%;
 } */
